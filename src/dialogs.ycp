/* ------------------------------------------------------------------------------
 * Copyright (c) 2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/lxc/dialogs.ycp
 * Package:	Configuration of lxc
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{

textdomain "lxc";

import "FileUtils";
import "IP";
import "Label";
import "Popup";
import "Progress";
import "Report";
import "Security";
import "Wizard";


boolean CreateContainerConfig (string name, string ip, string subnet, string bridge, string template)
{
            // busy message
            Popup::ShowFeedback ("", _("Creating Configuration..."));

            // lxc-createconfig -n <name> [-i <ipaddr/cidr>] [-b <bridge>] [-t <template]
            string cmd  = sformat ("echo 'y' | lxc-createconfig -n %1", name);
            if (ip != "")
            {
                cmd     = cmd + " -i " + ip;
                if (subnet != "")
                {
                  if (substring (subnet, 0, 1) != "/")
                  {
                    cmd = cmd + "/";
                  }
                  cmd   = cmd + subnet;
                }
            }

            if (bridge != "")
            {
                cmd     = cmd + " -b " + bridge;
            }

            if (template != "")
            {
                cmd     = cmd + " -t " + template;
            }

            y2internal ("cmd: %1", cmd);

            map out     = (map) SCR::Execute (.target.bash_output, cmd);

            y2internal ("out: %1", out);

            Popup::ClearFeedback ();

            if (out["exit"]:0 != 0)
            {
                // error message
                Report::Error (sformat (_("Error occured during configuration:

%1"), out["stdout"]:""));
                return false;
            }

    return true;
}

/**
 * Adding new Linux Container
 * @return dialog result
 */
any AddDialog () {

    // add dialog caption
    string caption = _("Adding New Container");

    list<term> template_items = Lxc::ReadTemplates ();

    term contents = `HBox (`HSpacing (), `VBox (
      `VSpacing (),
      // frame label
      `Frame (_("New Container"), `HBox (
        `HSpacing (0.5),
        // text entry
        `Left (`TextEntry (`id (`name), _("Name"))),
        `HSpacing (),
        // combo box label
        `ComboBox (`id (`template), _("Template"), template_items)
      )),
      `VSpacing (),
      // frame label
      `Frame (_("Network Settings"), `HBox (
        `HSpacing (0.5), `VBox (
          `HBox (
            // text entry label
            `TextEntry (`id (`ip), _("IP Address")),
            `HSpacing (),
            // text entry label
            `TextEntry (`id (`subnet), _("Subnet"), "/24"),
            `HSpacing (),
            `ReplacePoint (`id (`rp_lan),
              // combo box label
              `ComboBox (`id (`bridge), _("Bridge"), Lxc::ReadBridgesIds ())
            )
          ),
          `VSpacing (0.5),
          `Right (
            // push button label
            `PushButton (`id (`lan), _("Configure Network..."))
          )
        ),
        `HSpacing (0.5)
      )),
      `VSpacing (),
      // frame label
      `Frame (_("Password Settings"), `HBox (
        `HSpacing (0.5),
        // password entry
        `HWeight (1, `Password (`id (`pw1), _("Root Password"))),
        // password entry
        `HWeight (1, `Password (`id (`pw2), _("Repeat Password"))),
        `HSpacing (0.5)
      )),
      `VSpacing (2),
      `ReplacePoint (`id (`rp_status),
          `Label (`id (`status), "")
      ),
      `VSpacing ()
    ), `HSpacing ());

    string help_text    = "";

    Wizard::SetContentsButtons(caption, contents, help_text,
      // button label
      Label::CancelButton(), _("Create"));

    UI::ChangeWidget (`id (`ip), `ValidChars, IP::ValidChars4);

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	if (ret == `abort || ret == `cancel || ret == `back) {
            break;
        }

        if (ret == `lan)
        {
            WFM::CallFunction ("lan");
            UI::ReplaceWidget (`id (`rp_lan),
                // combo box label
                `ComboBox (`id (`bridge), _("Bridge"), Lxc::ReadBridgesIds ())
            );
            continue;
        }

        string name     = (string) UI::QueryWidget (`id (`name), `Value);
        string ip       = (string) UI::QueryWidget (`id (`ip), `Value);
        string subnet   = (string) UI::QueryWidget (`id (`subnet), `Value);
        string bridge   = (string) UI::QueryWidget (`id (`bridge), `Value);
        string template = (string) UI::QueryWidget (`id (`template), `Value);
        string pw1      = (string) UI::QueryWidget (`id (`pw1), `Value);
        string pw2      = (string) UI::QueryWidget (`id (`pw2), `Value);

        if (name == "")
        {
            // error popup
            Report::Error (_("Name was not entered."));
            UI::SetFocus (`id (`name));
            continue;
        }

        if (ip != "" && !IP::Check (ip))
        {
            Report::Error (IP::Valid4 ());
            UI::SetFocus (`id (`ip));
            continue;
        }
        if (pw1 != pw2)
        {
            // error message
            Report::Error (_("The passwords do not match."));
            UI::SetFocus (`id (`pw1));
            continue;
        }

        if (ret == `next)
        {
            string config_file          = sformat ("/root/%1.config", name);
            boolean create_config       = true;

            if (FileUtils::Exists (config_file))
            {
                if (!Popup::AnyQuestion (Popup::NoHeadline(),
                // yes/no popup
_("Configuration with the same name already exist.

Do you want to use existing configuration or
remove it and use the data you have just entered?
"),
                // button label
                _("Use Existing Configuration"), _("Replace With New"), `focus_yes))
                {
                    SCR::Execute (.target.remove, config_file);
                }
                else
                {
                    create_config       = false;
                }
            }

            if (create_config &&
                CreateContainerConfig (name, ip, subnet, bridge, template) == false)
            {
                continue;
            }

            // busy message
            Popup::ShowFeedback ("", sformat (_("Creating Container %1..."), name));

            // lxc-create -n <name> -f /root/<name>.config -t <template>
            string cmd = sformat ("lxc-create -n %1 -f /root/%1.config", name);
            if (template != "")
            {
                cmd     = cmd + " -t " + template;
            }
            y2internal ("cmd: %1", cmd);

            map out     = (map) SCR::Execute (.target.bash_output, cmd);

            y2internal ("out: %1", out);

            Popup::ClearFeedback ();

            if (out["exit"]:0 != 0)
            {
                Report::Error (sformat (_("Error occured during container creation:

%1"), out["stdout"]:""));
                continue;
            }

            // busy message
            Popup::ShowFeedback ("", _("Saving Root Password..."));

            string password     = Lxc::CryptPassword (pw1);

            string file = sformat ("/var/lib/lxc/%1/rootfs/etc/shadow", name);
            if (pw1 != "" && FileUtils::Exists (file))
            {
              // slash would break sed command
              password  = mergestring (splitstring (password, "/"), "\\/");
              // change the root password in the file /var/lib/lxc/<name>/rootfs/etc/shadow/
              cmd       = sformat ("sed --in-place 's/^root:[^:]*:/root:%1:/' %2", password, file);
              out       = (map) SCR::Execute (.target.bash_output, cmd);
              y2security ("out: %1", out);
            }
            Popup::ClearFeedback ();
            Popup::Message (sformat (_("Container '%1' was successfully created."), name));
            break;
        }
    }
    return ret;
}


void StartContainer (string name)
{
        // start container as a deamon, so it survives YaST's exit
        string cmd = sformat ("lxc-start -d -n %1", name);

        map out = (map) SCR::Execute (.target.bash_output, cmd);
        // FIXME check exit
        if (Lxc::textmode)
        {
          // message
          Popup::Message (sformat (_("The Container '%1' was started in the background.
Use 'lxc-console' command to connect to the running Container."), name));
        }
}

void StopContainer (string name)
{
    y2internal ("lxc-stop: %1",
      SCR::Execute (.target.bash_output, "lxc-stop -n " + name)
    );
}

void DestroyContainer (string name)
{
    // busy message
    Popup::ShowFeedback ("", sformat ("Destroying Container '%1'...", name));

    string cmd = "lxc-destroy -f -n " + name;
    map out     = (map) SCR::Execute (.target.bash_output, cmd);

    y2internal ("out: %1", out);

    Popup::ClearFeedback ();

    if (out["exit"]:0 != 0)
    {
        // error message
        Report::Error (sformat (_("Error while destroying:

%1"), out["stdout"]:""));
    }
}

// Launch console for selected container
integer Connect (string name)
{
    string cmd = sformat ("xterm -e lxc-console -n %1", name);

    integer pid	= (integer) SCR::Execute (.process.start_shell, cmd);

    return pid;
}

/**
 * Overview of existing Linux Containers
 * @return dialog result
 */
any OverviewDialog () {

    // LXC overview dialog caption
    string caption = _("LXC Configuration");
    integer console_pid = -1;
    list<term> lxc_list = [];

    void update_table () {

        lxc_list       = Lxc::GetContainers ();;
        UI::ChangeWidget (`id (`table), `Items, lxc_list);
        foreach (any t, [ `table, `destroy, `start, `stop ], {
          UI::ChangeWidget (`id (t), `Enabled, size (lxc_list) > 0);
        });
      // FIXME allow Connect only for running
    }

    term contents       = `HBox (`HSpacing (), `VBox (
      `VSpacing (),
      // Table header
      `Table (`id (`table), `opt (`notify), `header(_("Name"), _("Status")), lxc_list),
      `HBox (
        `PushButton (`id (`add_button), `opt (`key_F3), Label::CreateButton ()),
        // button label
        `PushButton (`id (`destroy), `opt (`key_F5), _("&Destroy")),
        // button label
        `Right (`PushButton (`id (`start), _("&Start"))),
        // button label
        `PushButton (`id (`stop), _("Sto&p")),
        `ReplacePoint (`id (`rp_console),
          Lxc::textmode ? `HBox () :
          // button label
          `PushButton (`id (`connect), _("Connect"))
        )
      ),
      `VSpacing ()
    ), `HSpacing ());

    // FIXME add Refresh Table button

    Wizard::SetContentsButtons(caption, contents, "overview",
        Label::BackButton(), Label::FinishButton());

    update_table ();

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	if (ret == `abort || ret == `cancel || ret == `next || ret == `back) {
            break;
        }

        if (ret == `add_button) {
            ret = `add;
            break;
        }
        string selected = (string) UI::QueryWidget (`id (`table), `CurrentItem);

        if (ret == `start) {
            StartContainer (selected);
            update_table ();
            continue;
        }

        if (ret == `connect) {
            // FIXME solve more consoles running
            // FIXME check if console was closed from outside
            console_pid = Connect (selected);
            UI::ReplaceWidget (`id (`rp_console),
              // button label
              `PushButton (`id (`disconnect), _("Disconnect"))
            );
            continue;
        }

        if (ret == `disconnect && console_pid != -1) {
            SCR::Execute (.process.kill, console_pid, 15);
            // FIXME timeout + kill -9
            console_pid     = -1;
            UI::ReplaceWidget (`id (`rp_console),
              // button label
              `PushButton (`id (`connect), _("Connect"))
            );
            continue;
        }

        if (ret == `stop) {
            StopContainer (selected);
            update_table ();
            continue;
        }

        if (ret == `destroy) {
            // FIXME ask for confirmation
            DestroyContainer (selected);
            update_table ();
            continue;
        }
    }

    return ret;
}

/* EOF */
}
